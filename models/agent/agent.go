package agent

import (
	"fmt"
	"github.com/bearded-web/bearded/pkg/pagination"
	"gopkg.in/mgo.v2/bson"
	"time"
)

type Agent struct {
	Id     bson.ObjectId `json:"id,omitempty" bson:"_id"` // autogenerated id
	Name   string        `json:"name"`                    // unique name is usually a hostname
	Status Status        `json:"status,omitempty" description:"one of [registered|approved|waiting|paused|unavailable|blocked]"`
	Type   Type          `json:"type,omitempty" description:"one of [system]"`

	Created time.Time `json:"created,omitempty" description:"when plan is created"`
	Updated time.Time `json:"updated,omitempty" description:"when plan is updated"`
	// tags is useful for filtering by clouds, server types etc.. f.e {"cloud": ["north"], "memory": ["high"], "cpu": ["low"]}
	//	Tags map[string][]string
}

func New() *Agent {
	return &Agent{}
}

type AgentList struct {
	pagination.Meta `json:",inline"`
	Results         []*Agent `json:"results"`
}

func (a *Agent) String() string {
	var str string
	if a.Id != "" {
		str = fmt.Sprintf("%x - %s [%s]", string(a.Id), a.Name, a.Status)
	} else {
		str = fmt.Sprintf("%s [%s]", a.Name, a.Status)
	}
	return str
}
